<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
         id="WebApp_ID" version="2.5">

    <display-name>Archetype Created Web Application</display-name>

    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>
            classpath:applicationContext.xml
        </param-value>
    </context-param>

    <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

    <!--

    1.Servlet
    ContextLoaderListener extends ContextLoader implements ServletContextListener。
    ServletContextListener extends EventListener。
    ServletContextListener只负责监听Web容器的启动和关闭的事件。

    ContextLoaderListener(或ContextLoaderServlet)将Web容器与spring容器进行整合。

    这是使用Spring 必须配置 的：

    <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    Spring配置文件的声明：

    <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:applicationContext.xml</param-value>
    </context-param>

    如果没有显式声明，则 系统默认 在WEB-INF/applicationContext.xml。

    在一个团队使用Spring的实际项目中，应该需要多个Spring的配置文件，如何使用和交叉引用的问题：
    如果想装入多个配置文件，可以用逗号作分隔符，如：

    <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>applicationContext-database.xml，applicationContext.xml</param-value>
    </context-param>

    多个配置文件里的交叉引用可以用ref的external或bean解决，例如:

    applicationContext.xml

    <bean id="userService" class="domain.user.service.impl.UserServiceImpl">
    <property name="dbbean">
         <ref bean="dbBean"/>
    </property>
    </bean>

    dbBean在applicationContext-database.xml中。

    2. Request
    RequestContextListener
    RequestContextListener implements ServletRequestListener

    ServletRequestListener extends EventListener
    ServletRequestListener监听HTTP请求事件，Web服务器接收的每次请求都会通知该监听器。

    RequestContextListener将Spring容器与Web容器结合的更加密切。这是可选配置，并且后者与scope=”request”搭配使用：

    3. 区别
    ContextLoaderListener(或ContextLoaderServlet)将Web容器与spring容器整合。RequestContextListener将Spring容器与Web容器结合的更加密切。
    前者为必选配置，后者为可选配置，并且后者与scope=”request”搭配使用。

    -->



</web-app>

